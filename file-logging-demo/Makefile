# File Logging Demo Makefile

.PHONY: help run clean logs examples setup test

# Default target
help: ## Show this help message
	@echo "File Logging Demo - Available commands:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-12s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Examples:"
	@echo "  make setup    # Create logs directory and prepare environment"
	@echo "  make run      # Run the complete file logging demo" 
	@echo "  make examples # Run configuration examples"
	@echo "  make logs     # View generated log files"
	@echo "  make clean    # Clean up generated files"

setup: ## Create logs directory and prepare environment
	@echo "üîß Setting up file logging demo environment..."
	@mkdir -p logs
	@echo "‚úÖ Logs directory created: logs/"
	@echo "üéØ Ready to run file logging demo!"

run: setup ## Run the complete file logging demonstration
	@echo "üöÄ Starting file logging demo..."
	@echo "üìÅ Log files will be created in: logs/"
	@echo ""
	@go run main.go
	@echo ""
	@echo "‚úÖ Demo completed! Check the files generated in logs/"

examples: setup ## Run configuration examples
	@echo "üìö Running configuration examples..."
	@go run config-examples.go
	@echo ""
	@echo "üí° These examples show different ways to configure file logging"

test: setup ## Run a quick test to verify logging works
	@echo "üß™ Running quick logging test..."
	@go run -c 'package main; import ("github.com/kart-io/logger"; "github.com/kart-io/logger/option"); func main() { opt := &option.LogOption{Engine: "slog", Level: "info", Format: "json", OutputPaths: []string{"logs/test.log"}}; l, _ := logger.New(opt); l.Info("Test logging successful") }' || echo 'Creating simple test...'
	@echo 'package main' > test-simple.go
	@echo 'import (' >> test-simple.go
	@echo '  "github.com/kart-io/logger"' >> test-simple.go 
	@echo '  "github.com/kart-io/logger/option"' >> test-simple.go
	@echo ')' >> test-simple.go
	@echo 'func main() {' >> test-simple.go
	@echo '  opt := &option.LogOption{' >> test-simple.go
	@echo '    Engine: "slog",' >> test-simple.go
	@echo '    Level: "info",' >> test-simple.go
	@echo '    Format: "json",' >> test-simple.go
	@echo '    OutputPaths: []string{"logs/test.log"},' >> test-simple.go
	@echo '  }' >> test-simple.go
	@echo '  logger, _ := logger.New(opt)' >> test-simple.go
	@echo '  logger.Info("Test logging successful")' >> test-simple.go
	@echo '  println("‚úÖ Test log written to logs/test.log")' >> test-simple.go
	@echo '}' >> test-simple.go
	@go run test-simple.go
	@rm test-simple.go
	@echo ""

logs: ## Show generated log files and their contents
	@echo "üìÑ Generated log files:"
	@echo ""
	@if [ -d "logs" ]; then \
		ls -la logs/ | grep -v "^total" | grep -v "^d" | sed 's/^/  /'; \
		echo ""; \
		echo "üìã Recent log entries:"; \
		echo ""; \
		for file in logs/*.log; do \
			if [ -f "$$file" ]; then \
				echo "=== $$(basename $$file) ==="; \
				tail -n 3 "$$file" | sed 's/^/  /'; \
				echo ""; \
			fi; \
		done; \
	else \
		echo "  No logs directory found. Run 'make setup' first."; \
	fi

clean: ## Clean up generated log files and temporary files
	@echo "üßπ Cleaning up generated files..."
	@rm -rf logs/
	@rm -f test-simple.go
	@echo "‚úÖ Cleanup completed!"

watch: ## Watch log files in real-time (requires tail)
	@echo "üëÄ Watching log files in real-time..."
	@echo "Press Ctrl+C to stop watching"
	@echo ""
	@if [ -f "logs/application.log" ]; then \
		tail -f logs/application.log; \
	elif [ -f "logs/app.log" ]; then \
		tail -f logs/app.log; \
	else \
		echo "No log files found to watch. Run 'make run' first."; \
	fi

demo-server: setup ## Run just the web server demo part
	@echo "üåê Starting web server demo..."
	@echo "This will run only the web server portion of the demo"
	@echo ""
	@go run -ldflags "-X main.runOnlyWebServer=true" main.go || echo "Web server demo completed"

size: ## Show size of generated log files
	@echo "üìä Log file sizes:"
	@echo ""
	@if [ -d "logs" ]; then \
		du -h logs/* 2>/dev/null | sed 's/^/  /' || echo "  No log files found"; \
		echo ""; \
		echo "Total logs directory size:"; \
		du -sh logs/ 2>/dev/null | sed 's/^/  /' || echo "  0B"; \
	else \
		echo "  No logs directory found"; \
	fi

monitor: ## Monitor log directory for changes
	@echo "üîç Monitoring logs directory for changes..."
	@echo "Press Ctrl+C to stop monitoring"
	@echo ""
	@if command -v inotifywait >/dev/null 2>&1; then \
		inotifywait -m -r logs/ -e create -e modify -e delete; \
	else \
		echo "inotifywait not available. Install inotify-tools package for real-time monitoring."; \
		echo "Falling back to periodic checks..."; \
		while true; do \
			ls -la logs/ 2>/dev/null | tail -n +2 | sed 's/^/  /'; \
			sleep 2; \
			clear; \
		done; \
	fi

info: ## Show information about the demo
	@echo "üìñ File Logging Demo Information"
	@echo ""
	@echo "This demo showcases various file logging configurations using kart-io/logger:"
	@echo ""
	@echo "üéØ Features demonstrated:"
	@echo "  ‚Ä¢ Single file logging (JSON format)"
	@echo "  ‚Ä¢ Multiple output paths (console + file)"  
	@echo "  ‚Ä¢ Level-based file separation"
	@echo "  ‚Ä¢ File rotation patterns"
	@echo "  ‚Ä¢ Web server access and application logs"
	@echo ""
	@echo "üìÅ Generated files:"
	@echo "  ‚Ä¢ logs/single.log       - Basic single file output"
	@echo "  ‚Ä¢ logs/multiple.log     - Multi-output example"
	@echo "  ‚Ä¢ logs/info.log         - Info-level and above"
	@echo "  ‚Ä¢ logs/error.log        - Error-level and above"
	@echo "  ‚Ä¢ logs/access.log       - HTTP access logs"
	@echo "  ‚Ä¢ logs/application.log  - Application logs"
	@echo "  ‚Ä¢ logs/rotated-*.log    - Timestamped rotation example"
	@echo ""
	@echo "üöÄ Quick start:"
	@echo "  1. make setup    # Prepare environment"
	@echo "  2. make run      # Run complete demo"
	@echo "  3. make logs     # View generated logs"
	@echo ""
	@echo "üìö Learn more: Check README.md for detailed documentation"

# Hidden target for CI/automated testing
test-ci: setup
	@echo "Running CI tests for file logging demo..."
	@timeout 30 go run main.go > /dev/null 2>&1 || echo "Demo completed (or timed out)"
	@if [ -f "logs/single.log" ] && [ -f "logs/access.log" ] && [ -f "logs/application.log" ]; then \
		echo "‚úÖ All expected log files were created"; \
		exit 0; \
	else \
		echo "‚ùå Some expected log files were missing"; \
		exit 1; \
	fi